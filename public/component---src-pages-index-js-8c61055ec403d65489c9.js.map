{"version":3,"sources":["webpack:///./src/components/productList.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["StyledLink","styled","Link","_templateObject","Badge","div","_templateObject2","FadeImage","props","react_default","a","createElement","style","position","Reveal","animated","Content","visible","Image","src","img","margin","hidden","isNew","isSale","mapProductsToItems","products","map","_ref","_ref$node","node","name","id","price","background_colour","description","reviews","as","to","key","image","productList_FadeImage","header","Card","Header","color","textAlign","meta","Meta","productList","_ref2","Group","items","itemsPerRow","stackable","IndexPage","render","_this","this","filterProducts","get","filter","x","undefined","category","search","_","includes","toLowerCase","Fragment","layout","seo","title","keywords","React","Component","query","connect","state","productFilter","SEO","lang","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","data","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"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","file":"component---src-pages-index-js-8c61055ec403d65489c9.js","sourcesContent":["import React from 'react'\r\nimport Link from 'gatsby-link'\r\nimport { Card, Image, Reveal } from 'semantic-ui-react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledLink = styled(Link)`\r\n  box-shadow: none !important;\r\n  &:hover {\r\n    transform: none !important;\r\n  }\r\n  .content {\r\n    border-top: none !important;\r\n  }\r\n`\r\nconst Badge = styled.div`\r\n  position: absolute;\r\n  top: 0.5rem;\r\n  right: 0.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 10;\r\n  color: yellow;\r\n  height: 2.5rem;\r\n  width: 2.5rem;\r\n  background-color: tomato;\r\n  border-radius: 50%;\r\n`\r\n\r\nconst FadeImage = props => (\r\n  <div style={{ position: 'relative' }}>\r\n    <Reveal animated=\"small fade\">\r\n      <Reveal.Content visible>\r\n        <Image src={`${props.img[0]}`} style={{ margin: 0 }} />\r\n      </Reveal.Content>\r\n      <Reveal.Content hidden>\r\n        <Image src={`${props.img[1]}`} style={{ margin: 0 }} />\r\n      </Reveal.Content>\r\n    </Reveal>\r\n    {props.isNew && <Badge>New</Badge>}\r\n    {props.isSale && <Badge>Sale</Badge>}\r\n  </div>\r\n)\r\n\r\nconst mapProductsToItems = products =>\r\n  products.map(\r\n    ({\r\n      node: {\r\n        name,\r\n        id,\r\n        img,\r\n        background_colour,\r\n        price,\r\n        isNew,\r\n        isSale,\r\n        description,\r\n        reviews,\r\n      },\r\n    }) => {\r\n      return {\r\n        as: StyledLink,\r\n        to: `/product/${id}/`,\r\n        key: `key-${id}`,\r\n        image: <FadeImage {...{ isNew, isSale, img }} />,\r\n        header: (\r\n          <Card.Header style={{ color: 'dimgray', textAlign: 'center' }}>\r\n            {name}\r\n          </Card.Header>\r\n        ),\r\n        meta: (\r\n          <Card.Meta style={{ color: 'dimgray', textAlign: 'center' }}>\r\n            {price}$\r\n          </Card.Meta>\r\n        ),\r\n      }\r\n    }\r\n  )\r\n\r\nexport default ({ products }) => (\r\n  <Card.Group items={mapProductsToItems(products)} itemsPerRow={3} stackable />\r\n)\r\n","import React from 'react'\r\nimport Layout from '../components/layout'\r\nimport SEO from '../components/seo'\r\nimport 'react-sticky-header/styles.css'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport ProductList from '../components/productList'\r\nimport { graphql } from 'gatsby'\r\nimport { connect } from 'react-redux'\r\nimport _, { get} from 'lodash'\r\nimport Headroom from 'react-headroom'\r\n\r\nclass IndexPage extends React.Component {\r\n  \r\n  render() {\r\n    const products = get(this, 'props.data.allProductsJson.edges')\r\n    const filterProducts = products.filter(\r\n      x =>  this.props.category !== undefined ?  x.node.category === this.props.category : x\r\n    ).filter(\r\n      x => this.props.search !== '' ?  _.includes( x.node.name.toLowerCase(), this.props.search.toLowerCase())  ?  x : '' : x \r\n    )\r\n\r\n    return (\r\n      <>\r\n      <Layout>\r\n      <SEO title=\"Home\" keywords={[`yoga`, `shop`, `yoga pants`]} />\r\n      <ProductList products={filterProducts}/>\r\n    </Layout>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\nexport const query =graphql`\r\n{\r\n  allProductsJson {\r\n    edges {\r\n      node {\r\n        id\r\n        name\r\n        price\r\n        category\r\n        img\r\n        isNew\r\n        isSale\r\n        description\r\n        reviews { \r\n          text\r\n          rating\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    category: state.productFilter.category,\r\n    search: state.productFilter.search\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n)(IndexPage)\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}